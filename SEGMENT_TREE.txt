/// @brief Segment Tree for ...
const ll NN = 3e5 + 9;
ll arr[NN];
struct SegTree
{
    ll t[4 * NN];
    ll inf = 1e18;
    SegTree()
    {
        memset(t, 0, sizeof t);
    }
    void build(ll n, ll b, ll e)
    {
        if (b == e)
        {
            t[n] = arr[b];
            return;
        }
        ll mid = (b + e) >> 1, l = n << 1, r = l | 1;
        build(l, b, mid);
        build(r, mid + 1, e);
        t[n] = max(t[l], t[r]);
    }
    void upd(ll n, ll b, ll e, ll i, ll x)
    {
        if (b > i || e < i)
            return;
        if (b == e && b == i)
        {
            t[n] = x;
            return;
        }
        ll mid = (b + e) >> 1, l = n << 1, r = l | 1;
        upd(l, b, mid, i, x);
        upd(r, mid + 1, e, i, x);
        t[n] = max(t[l], t[r]);
    }
    ll query(ll n, ll b, ll e, ll i, ll j)
    {
        if (b > j || e < i)
            return -inf;
        if (b >= i && e <= j)
            return t[n];
        ll mid = (b + e) >> 1, l = n << 1, r = l | 1;
        ll L = query(l, b, mid, i, j);
        ll R = query(r, mid + 1, e, i, j);
        return max(L, R);
    }
} ST;
////////// THE END
