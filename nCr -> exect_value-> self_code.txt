vector<ll> prime;
void sieve()
{
    vector<ll> aa(100, 1);
    for (int i = 3; i * i < 100; i += 2)
    {
        if (aa[i] == 1)
        {
            for (int j = i * i; j < 100; j += i * 2)
            {
                aa[j] = 0;
            }
        }
    }
    prime.push_back(2);
    for (int i = 3; i < 100; i += 2)
    {
        if (aa[i] == 1)
            prime.push_back(i);
    }
}
vector<ll> primefact(ll n)
{
    vector<ll> ans;
    for (int i = 0; i < prime.size(); i++)
    {
        if (n % prime[i] == 0)
        {
            while (n % prime[i] == 0)
            {
                ans.push_back(prime[i]);
                n /= prime[i];
            }
        }
        if (n == 1)
            break;
    }
    if (n != 1)
        ans.push_back(n);

    return ans;
}

ll nCr(ll n, ll r)
{
    ll ans = 1;
    map<ll, ll> mp;
    for (int i = 1; i <= n; i++)
    {
        vector<ll> tamp = primefact(i);
        for (auto u : tamp)
            mp[u]++;
    }
    for (int i = 1; i <= n - r; i++)
    {
        vector<ll> tamp = primefact(i);
        for (auto u : tamp)
            mp[u]--;
    }
    for (int i = 1; i <= r; i++)
    {
        vector<ll> tamp = primefact(i);
        for (auto u : tamp)
            mp[u]--;
    }
    for (auto u : mp)
    {
        ans *= pow(u.first, u.second);
    }

    return ans;
}
