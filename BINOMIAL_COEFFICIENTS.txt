vector<ll> fact, invf;
ll qexp(ll a, ll b, ll m) // complixity O(log b) == a ^ b
{
    ll res = 1;
    while (b)
    {
        if (b % 2)
            res = (__int128_t)res * a % m;
        a = (__int128_t)a * a % m;
        b /= 2;
    }
    return res;
}
void precompute(int n)
{
    fact.assign(n + 1, 1);
    for (int i = 1; i <= n; i++)
        fact[i] = fact[i - 1] * i % mod;
    invf.assign(n + 1, 1);
    invf[n] = qexp(fact[n], mod - 2, mod);
    for (int i = n - 1; i > 0; i--)
        invf[i] = invf[i + 1] * (i + 1) % mod;
}
ll nCk(int n, int k) /// nCk = n!/(k!(n-k)!)
{
    if (k < 0 || k > n)
        return 0;
    return fact[n] * invf[k] % mod * invf[n - k] % mod;
    // return fact[n] * qexp(fact[k], mod - 2, mod) % mod * qexp(fact[n - k], mod - 2, mod) % mod;
}

cout << nCk(n, k) << endl;
